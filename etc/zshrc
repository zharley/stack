################################################################################
## GENERAL #####################################################################
################################################################################

# Set up the prompt
# @see http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
# %n           Username
# %U (%u)      Start (stop) underline mode
# %m           Hostname upto the first .
# %3~          Current working directory, showing a max of 3 trailing components
#              and with ~ instead of home
# %B (%b)      Start (stop) boldface mode
# %#           A `#' if the shell is running with privileges, a `%' if not
PROMPT='%n@%U%m%u:%3~%B%#%b '

# Keep 10000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Use mostly vi bindings with a couple of extras
bindkey -v
bindkey '^P' up-line-or-history
bindkey '^N' down-line-or-history
bindkey '^R' history-incremental-search-backward

# The current chroot (used in the prompt below)
if [ -z "$MY_CHROOT" ] && [ -r /etc/MY_CHROOT ]; then
    MY_CHROOT=$(cat /etc/MY_CHROOT)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    set_title() { printf "\e]0;$PWD\a" }

    chpwd_functions=(set_title)

    if [ -n "$DISPLAY" ]; then
        # makes "tput colors" output 256
        export TERM=xterm-256color
    fi

    # Substitute specific colour palette
    echo -n "\033]4;0;#1e1314\007"
    echo -n "\033]4;1;#d27172\007"
    echo -n "\033]4;2;#4bcf72\007"
    echo -n "\033]4;3;#d2a043\007"
    echo -n "\033]4;4;#4b71d0\007"
    echo -n "\033]4;5;#d242d0\007"
    echo -n "\033]4;6;#4bcfd0\007"
    echo -n "\033]4;7;#d2cfd0\007"
    echo -n "\033]4;8;#787172\007"
    echo -n "\033]4;9;#ff7172\007"
    echo -n "\033]4;10;#78ff72\007"
    echo -n "\033]4;11;#ffff72\007"
    echo -n "\033]4;12;#78a0fe\007"
    echo -n "\033]4;13;#ff71fe\007"
    echo -n "\033]4;14;#4bfffe\007"
    echo -n "\033]4;15;#fffffe\007"
    echo -n "\033]10;#d2cfd0\007"
    echo -n "\033]11;#1e1314\007"
    ;;
*)
    ;;
esac

# Use colours
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

################################################################################
## PLUGINS #####################################################################
################################################################################

# Include site functions installed in /usr/local
if [ -d "/usr/local/share/zsh/site-functions" ]; then
    fpath=(
        /usr/local/share/zsh/site-functions
        $fpath
    )
fi

# initialize and configure tab completion
# -U  suppress alias expansion (recommended for functions supplied with zsh)
# -z  force native emulation (rather than -k for ksh)
autoload -Uz compinit
compinit
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
#zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# use special move command for easy renaming
autoload -Uz zmv

# use the stat built-in for resolving symlinks
zmodload -a zsh/stat stat

################################################################################
## OPTIONS #####################################################################
################################################################################

# @see http://zsh.sourceforge.net/Doc/Release/Options-Index.html

# If a command is issued that can't be executed as a normal command, and the 
# command is the name of a directory, perform the cd command to that directory.
setopt AUTO_CD

# Treat the #, ~ and ^ characters as part of patterns for filename generation, 
# etc. (An initial unquoted ~ always produces named directory expansion.)
setopt EXTENDED_GLOB

# If unset, the cursor is set to the end of the word if completion is started. 
# Otherwise it stays there and completion is done from both ends.
setopt COMPLETE_IN_WORD

# If a new command line being added to the history list duplicates an older one, 
# the older command is removed from the list (even if it is not the previous event).
setopt HIST_IGNORE_ALL_DUPS

# Save each command’s beginning timestamp (in seconds since the epoch) and the
# duration (in seconds) to the history file. The format of this prefixed data is:
# ‘: <beginning time>:<elapsed seconds>;<command>’.
setopt EXTENDED_HISTORY

# This options works like APPEND_HISTORY except that new history lines are added
# to the $HISTFILE incrementally (as soon as they are entered), rather than 
# waiting until the shell exits. The file will still be periodically re-written 
# to trim it when the number of lines grows 20% beyond the value specified by 
# $SAVEHIST (see also the HIST_SAVE_BY_COPY option).
setopt INC_APPEND_HISTORY

# Whenever the user enters a line with history expansion, don’t execute the 
# line directly; instead, perform history expansion and reload the line into
# the editing buffer.
setopt HIST_VERIFY

################################################################################
## AUTO LOAD ###################################################################
################################################################################

# Determine stack directories
MY_ZSHRC_FILE=`stat +link $HOME/.zshrc`
MY_ETC_DIR=${MY_ZSHRC_FILE:h}
MY_BIN_DIR="${MY_ETC_DIR:h}/bin"

# Add stack bin to path
if [ -d "$MY_BIN_DIR" ]; then
    PATH="$MY_BIN_DIR:$PATH"
fi

# Load stack aliases
if [ -f "${MY_ETC_DIR}/aliases" ]; then
    source "${MY_ETC_DIR}/aliases"
fi

# Load optional custom rc
if [ -f "$HOME/.stackrc" ]; then
    source "$HOME/.stackrc"
fi
