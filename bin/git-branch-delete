#!/usr/bin/ruby
require 'shellwords'

# Provide repeatable selection prompt
def get_pick(count)
  prompt = "=> Pick one or hit ^C to cancel [1-#{count}]: "
  pick = nil

  while pick.nil? do
    print prompt
    pick = STDIN.gets.chomp.to_i
    pick = nil if pick < 1 or pick > count
  end

  pick
end

def calc_distance(a, b)
  behind, ahead = `git rev-list --left-right --count #{a.shellescape}...#{b.shellescape}`.split(/\s/)
  [ behind.to_i, ahead.to_i ]
end

def prompt_for(text, default = nil, options = nil)
  response = nil

  while response.nil? do
    prompt = "==> #{text}"
    prompt += " [#{options.join(',')}]" if options
    prompt += " [default=#{default}]" if default
    prompt += options ? '? ' : ': '
    print prompt
    response = STDIN.gets.chomp

    if response.empty? and (not default.nil?)
      response = default
    end

    if options
      response = nil unless options.include?(response)
    end
  end

  return response
end

# Update from remote (fetch all branches and remove locals that are stale)
puts "=> Updating..."
system "git fetch --all --prune"

# Get local branches (without leading *)
branches = `git for-each-ref --format='%(refname:short)' refs/heads/`.split("\n")

# Remove special names from the list
branches.delete "master"

# List branches
puts "=> Delete which local branch?"
count = 0
for branch in branches
  count += 1
  puts "%2d. %s" % [ count, branch ]
end

# Get selection
pick ||= get_pick(count)
pick = pick.to_i
raise "Invalid pick" if pick < 1 || pick > count

# Get branch to delete
branch = branches[pick - 1]

# Get current branch
current_branch = `git rev-parse --abbrev-ref HEAD`.chomp

# See if they're the same
if branch == current_branch
  if prompt_for("Attempting to delete current branch. Checkout master first", 'y', %w{y n}) == 'y'
    system "git checkout master"
  else
    puts "=> Cancelled."
    exit
  end
end

# Compare to master
remote_url = `git config --get remote.origin.url`.chomp.gsub("git@github.com:", "https://github.com/")
behind_master, ahead_master = calc_distance('master', branch)
puts "This branch is #{ahead_master} ahead of master, #{behind_master} behind master"
puts "   Compare: " + "#{remote_url}/compare/master...#{branch}"

if ahead_master == 0
  puts "=> Master is up-to-date with all commits from this branch. It can probably be deleted."
end

result = prompt_for "Delete '#{branch}' locally", "y", %w{ y n }
if result == 'y'
  # Delete the branch
  system "git branch -D #{branch.shellescape}"

  result = prompt_for "Delete '#{branch}' remotely", "y", %w{ y n }
  if result == 'y'
    system "git push origin --delete #{branch.shellescape}"
  end
end

puts "=> Done!"
