#!/usr/bin/ruby

def prompt_for(text, options = nil)
  response = nil

  while response.nil? do
    prompt = "=> #{text}"
    prompt += " [#{options.join(',')}]" if options
    prompt += options ? '? ' : ': '
    print prompt
    response = STDIN.gets.chomp

    if options
      response = nil unless options.include?(response)
    end
  end

  response
end

def warn_about(text)
  prompt = "Warning: #{text}. Continue anyway" 
  exit unless prompt_for(prompt, %w{y n}) == 'y'
end

def skippable?(line)
  # yes if it's a comment or a whitespace line
  line.start_with?("#") || line =~ /$\s*^/
end

################################################################################
## MAIN ########################################################################
################################################################################

# needs an argument
if ARGV.empty?
  puts "Usage: #{File.basename($0)} packages.list"
  exit 1
end

filename = ARGV[0]

if prompt_for("Update and upgrade existing packages", %w{y n}) == 'y'
  # update
  warn_about "Update failed" unless system("sudo apt-get -y update") 

  # upgrade
  warn_about "Upgrade failed" unless system("sudo apt-get -y upgrade") 
end

# read all packages from the file
lines = File.read(filename).split("\n")
packages = []

for line in lines
  next if skippable?(line)
  packages += line.split(/\s+/)
end

exit unless prompt_for("Check/install #{packages.size} packages from '#{filename}'", %w{y n}) == 'y'

install_count = fail_count = 0

# get list of installed packages
installed_packages = `dpkg --get-selections | awk '{ print $1 }'`.split("\n")

for package in packages
  print "=> Checking #{package}..."

  if installed_packages.index(package)
    puts "[ok]"
  else
    puts "[install]"

    # attempt to install this package
    if system("sudo apt-get -yqq install #{package}")
      install_count += 1
    else
      # fail
      warn_about "Package #{package} failed to install"
      fail_count += 1
    end
  end
end

installed_packages = `dpkg --get-selections | awk '{ print $1 }'`.split("\n")

for package in packages
  unless installed_packages.index(package)
    warn_about "Package #{package} not detected after apparently successful install"
    fail_count += 1
  end
end

puts "=> #{packages.size} checked. #{install_count} installed. #{fail_count} fails."
