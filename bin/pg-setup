#!/bin/bash
set -e

say() {
    echo -e "=> $1"
}

psql_safe() {
    read -p "=> Run: $1 (y)? " MY_ANSWER

    if test "$MY_ANSWER" != "y"; then
        say "Skipped."
    else
        # Execute PostgreSQL command
        if ! psql -c "$1"; then
            say "PostgreSQL command failed:"
            say "$1"
            exit 1
        fi
    fi
}

# Make current user a postgres admin, for convenience during development.
read -p "=> Make $USER a postgres admin (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    sudo -u postgres createuser -s $USER
fi

# Set a dummy password for the postgres user, for convenience during development.
read -p "=> Set postgres (admin) password to 'postgres' (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    psql -c "ALTER USER postgres PASSWORD 'postgres'"
fi

read -p "=> Modify template1 use UTF8 as the default encoding (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    MY_DESTINATION='/tmp/template1.sql'

    # Optionally dump template1 before modifying it
    read -p "=> Before modifying template1, dump it to $MY_DESTINATION (y)? " MY_ANSWER
    if test "$MY_ANSWER" != "y"; then
        say "Skipped."
    else
        pg_dump template1 > $MY_DESTINATION
        say "Backup of template1 dumped to: $MY_DESTINATION"
    fi

    # Unmark template1 as being a template (which protects it from modification)
    psql_safe "UPDATE pg_database SET datistemplate=FALSE WHERE datname='template1'"

    # Drop the template1 database
    psql_safe "DROP DATABASE template1"
    
    # Re-create template1 based on template0, but this time use UTF8 encoding
    psql_safe "CREATE DATABASE template1 WITH owner=postgres template=template0 encoding='UTF8'"

    # Write a comment
    psql_safe "COMMENT ON DATABASE template1 IS 'default template for new databases (using UTF8)';"

    # Re-mark template1 as being a template
    psql_safe "UPDATE pg_database SET datistemplate=TRUE WHERE datname='template1'"
fi

say "Done."
