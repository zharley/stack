#!/usr/bin/env bash

# check for presence of parameters
if [ -z $1 ]; then
    echo "Usage: `basename $0` user@host.com [protocol]"
    echo "(protocol defaults to dsa)"
    exit 1
fi

# destination login (user@host) is the first parameter
MY_LOGIN="$1"

# the second parameter optionally specifies a protocol
MY_PROTOCOL="dsa"
if [ -n "$2" ]; then
    MY_PROTOCOL="$2"
fi

# based on the protocol, expect to find a key here
MY_PUBLIC_KEY_FILE="$HOME/.ssh/id_$MY_PROTOCOL.pub"
if [ ! -f "$MY_PUBLIC_KEY_FILE" ]; then
    echo "=> Cannot find $MY_PUBLIC_KEY_FILE"
    exit 1
fi

# read key to local variable
MY_PUBLIC_KEY=`cat $MY_PUBLIC_KEY_FILE`

# one-liner that remotely generates a key (if necessary) and appends the 
# public key to the authorized_keys file on the destination server
MY_COMMAND="(stat ~/.ssh/id_$MY_PROTOCOL.pub || \
ssh-keygen -t $MY_PROTOCOL -f ~/.ssh/id_$MY_PROTOCOL -N '') && \
echo \"$MY_PUBLIC_KEY\" >> ~/.ssh/authorized_keys && \
chmod 600 ~/.ssh/authorized_keys"

# log in successfully OR initiate authorization
ssh -o "StrictHostKeyChecking no" -o "PasswordAuthentication no" $MY_LOGIN \
"echo Verified logging into $MY_LOGIN" || ssh $MY_LOGIN $MY_COMMAND 
