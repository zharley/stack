#! /bin/bash
set -e

say() {
    echo "=> $1"
}

symlink_file() {
    # -s  make symbolic links instead of hard links
    # -v  print name of each linked file 
    # -i  prompt whether to remove destinations
    ln -siv "$1" "$2"
}

symlink_dir() {
    # -T  treat LINK_NAME as a normal file
    ln -sivT "$1" "$2"
}

# autodetect project directories
MY_MAIN_DIR="$(cd "$(dirname "$0")" && pwd)"
MY_BIN_DIR="$(cd "$MY_MAIN_DIR/bin" && pwd)"
say "Stack bin directory: $MY_BIN_DIR"
MY_ETC_DIR="$(cd "$MY_MAIN_DIR/etc" && pwd)"
say "Stack etc directory: $MY_ETC_DIR"

# aliases file is here
MY_ALIASES_PATH="$MY_ETC_DIR/aliases"

# the profile file is here
MY_PROFILE_PATH="$HOME/.profile"
MY_INCLUDE_BIN="
# include stack bin
if [ -d \"$MY_BIN_DIR\" ]; then
    PATH=\"$MY_BIN_DIR:\$PATH\"
fi"

if grep -q "# include stack bin" "$MY_PROFILE_PATH"; then
    say "Looks like $MY_PROFILE_PATH already includes the stack bin."
else
    # preview step
    say "This will APPEND the following code to your .profile: $MY_INCLUDE_BIN"

    # apply step
    read -p "=> Update $MY_PROFILE_PATH (y)? " MY_ANSWER
    if test "$MY_ANSWER" != "y"; then
        say "Skipped."
    else
        echo "$MY_INCLUDE_BIN" >> "$MY_PROFILE_PATH"
    fi
fi

# the bashrc file is here
MY_BASHRC_PATH="$HOME/.bashrc"
MY_INCLUDE_ALIASES="
# include stack aliases
if [ -f \"$MY_ALIASES_PATH\" ]; then
    . \"$MY_ALIASES_PATH\"
fi"

if grep -q "# include stack aliases" "$MY_BASHRC_PATH"; then
    say "Looks like $MY_BASHRC_PATH already includes the stack aliases."
else
    # preview step
    say "This will APPEND the following code to your .bashrc: $MY_INCLUDE_ALIASES"

    # apply step
    read -p "=> Update $MY_BASHRC_PATH (y)? " MY_ANSWER
    if test "$MY_ANSWER" != "y"; then
        say "Skipped."
    else
        echo "$MY_INCLUDE_ALIASES" >> "$MY_BASHRC_PATH"
    fi
fi

# preview step
say "This will add editor-related symlinks to home directory: .vimrc .vim .ackrc gtkrc-2.0"

# apply step
read -p "=> Install editor symlinks (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    symlink_file "$MY_ETC_DIR/vimrc" "$HOME/.vimrc"
    symlink_file "$MY_ETC_DIR/ackrc" "$HOME/.ackrc"
    symlink_file "$MY_ETC_DIR/gtkrc-2.0" "$HOME/.gtkrc-2.0"
    symlink_dir "$MY_ETC_DIR/vim" "$HOME/.vim"
fi

# preview step
say "This will install all submodules (especially vim plugins managed by pathogen)."

# apply step
read -p "=> Install submodules (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    cd "$MY_MAIN_DIR"
    git submodule update --init
fi

# preview step
say "This will compile binaries for the Command-T vim module."

# apply step
read -p "=> Compile Command-T (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    cd "$MY_ETC_DIR/vim/bundle/command-t/ruby/command-t"
    ruby extconf.rb
    make
fi

# preview step
say "This will add x-related symlinks to home directory: .xmonad .xsession"

# apply step
read -p "=> Install x-related symlinks (y)? " MY_ANSWER
if test "$MY_ANSWER" != "y"; then
    say "Skipped."
else
    mkdir -p "$HOME/.xmonad"
    symlink_file "$MY_ETC_DIR/xmonad.hs" "$HOME/.xmonad/xmonad.hs"
    symlink_file "$MY_ETC_DIR/xmobar.hs" "$HOME/.xmonad/xmobar.hs"
    symlink_file "$MY_ETC_DIR/xsession" "$HOME/.xsession"
fi

# done
say "Done!"
say "Logout and login in to verify that it setup worked."
